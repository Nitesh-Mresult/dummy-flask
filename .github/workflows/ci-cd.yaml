# .github/workflows/ci-cd.yml

name: Deploy Flask App to AKS with Terraform

on:
  push:
    branches:
      - main

jobs:
  infrastructure-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
  - name: Checkout code
    uses: actions/checkout@v2

  - name: Set up Terraform
    uses: hashicorp/setup-terraform@v1
    with:
      terraform_version: '1.5.0'

  - name: Log in to Azure
    uses: azure/login@v1
    with:
      creds: ${{ secrets.azure_credentials }}  # Use GitHub secrets for Azure credentials

  - name: Terraform Init
    run: terraform init
    working-directory: ./infrastructure  # Adjust path to your Terraform directory

  # Import the resources if they don't exist in the state yet
  - name: Import Resources
    run: |
      terraform import data.azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP_NAME }}
      terraform import data.azurerm_container_registry.example /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP_NAME }}/providers/Microsoft.ContainerRegistry/registries/${{ secrets.ACR_NAME }}
      terraform import data.azurerm_kubernetes_cluster.example /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP_NAME }}/providers/Microsoft.ContainerService/managedClusters/${{ secrets.AKS_CLUSTER_NAME }}
    working-directory: ./infrastructure

  - name: Terraform Plan
    run: terraform plan -out=tfplan
    working-directory: ./infrastructure

  - name: Terraform Apply
    run: terraform apply -auto-approve tfplan
    working-directory: ./infrastructure

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy  # Ensure infrastructure is deployed before app deployment
    environment: production

    steps:
      # Checkout Flask Application Code
      - name: Checkout Flask Application Code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}  # Azure Container Registry URL (e.g., 'your-acr-name.azurecr.io')
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build and Push Docker Image for Flask App
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}  # Use commit SHA as image tag
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:$IMAGE_TAG app/login  # Build Docker image for Flask app
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/flask-app:$IMAGE_TAG  # Push image to ACR

      # Set up AKS credentials to access the cluster
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.TF_RESOURCE_GROUP }} --name flask-app --overwrite-existing

      # Deploy/Update the AKS Deployment with new image
      - name: Update AKS Deployment
        run: |
          kubectl apply -f app/kubernetes/deployment.yaml  # Apply the Kubernetes deployment
          kubectl set image deployment/flask-app-deployment flask-app=${{ secrets.ACR_LOGIN_SERVER }}/flask-app:${{ github.sha }}  # Update image in the deployment
          kubectl apply -f app/kubernetes/my-app-service.yaml  # Apply service definition
          kubectl apply -f app/kubernetes/my-app-ingress.yaml  # Apply ingress definition

      # Verify the deployment status in AKS
      - name: Verify Deployment Status
        run: |
          kubectl rollout status deployment/flask-app-deployment  # Ensure the deployment is successful
