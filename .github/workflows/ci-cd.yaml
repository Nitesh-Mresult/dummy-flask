name: Deploy Flask App to AKS with Terraform

on:
  push:
    branches:
      - main

jobs:
  infrastructure-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1.1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 1.2: List files in 'infrastructure' directory (debugging step)
      - name: List files in infrastructure directory
        run: ls -la ./infrastructure  # Ensure .tf files are present

      # Step 1.3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      # Step 1.4: Authenticate with Azure using Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}  # Using the `azure_credentials` secret for authentication

      # Step 1.5: Set Azure Service Principal Credentials for Terraform
      - name: Set Azure Service Principal Credentials for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.azure_credentials).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.azure_credentials).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.azure_credentials).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.azure_credentials).subscriptionId }}" >> $GITHUB_ENV

      # Step 1.6: Force Unlock Terraform State (if necessary)
      - name: Force Unlock Terraform State
        run: terraform force-unlock 4b760752-4459-1dac-5859-1fa8ee6ed04b
        working-directory: ./infrastructure
        continue-on-error: true  # Continue even if force-unlock fails

      # Step 1.7: Initialize Terraform with backend configuration
      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TF_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" -backend-config="container_name=${{ secrets.TF_CONTAINER_NAME }}" -backend-config="key=${{ secrets.TF_KEY }}"
        working-directory: ./infrastructure

      # Step 1.8: Plan and Apply
      - name: Terraform Plan and Apply
        run: |
          terraform plan -out=tfplan -input=false -no-color
          terraform apply -auto-approve tfplan
        working-directory: ./infrastructure

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy  # Ensure infrastructure is deployed before app deployment

    steps:
      # Step 2.1: Checkout Flask application code
      - name: Checkout Flask Application Code
        uses: actions/checkout@v2

      # Step 2.2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 2.3: Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: niteshcontainers.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Step 2.4: Build and Push Docker Image to ACR
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG app/login
          docker push niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG

      # Step 2.5: Set up AKS credentials
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.TF_RESOURCE_GROUP }} --name flask-app --overwrite-existing

      # Step 2.6: Deploy to AKS by updating the image in the deployment
      - name: Update AKS Deployment
        run: |
          kubectl apply -f app/kubernetes/deployment.yaml
          kubectl set image deployment/flask-app-deployment flask-app=niteshcontainers.azurecr.io/flask-app:${{ github.sha }}
          kubectl apply -f app/kubernetes/my-app-service.yaml
          kubectl apply -f app/kubernetes/my-app-ingress.yaml

      # Step 2.7: Verify deployment status in AKS
      - name: Verify Deployment Status
        run: |
          kubectl rollout status deployment/flask-app-deployment
