name: Deploy Flask App to AKS with Terraform

on:
  push:
    branches:
      - main

jobs:
  infrastructure-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout code (including Terraform files in 'infrastructure')
      - name: Checkout Terraform and Application Code
        uses: actions/checkout@v2

      # Step 2: List files in the infrastructure directory (for debugging)
      - name: List files in infrastructure directory
        run: ls -la ./infrastructure  # Ensure Terraform files are in this directory

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      # Step 4: Log in to Azure using credentials stored in GitHub Secrets
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 5: Initialize Terraform with backend configuration
      - name: Terraform Init
        run: terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_CONTAINER_NAME }}" \
          -backend-config="key=${{ secrets.TF_KEY }}"
        working-directory: ./infrastructure  # Point to 'infrastructure' folder

      # Step 6: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./infrastructure  # Ensure it runs inside the 'infrastructure' directory

      # Step 7: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure  # Apply changes from 'infrastructure' directory

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy  # Ensure infrastructure is deployed before the Flask app

    steps:
      # Step 1: Checkout the Flask app code
      - name: Checkout Flask Application Code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: niteshcontainers.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Step 4: Build and push the Docker image to ACR
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}  # Use commit SHA as the image tag
          docker build -t niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG app/login
          docker push niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG

      # Step 5: Set up AKS credentials
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group POC_test --name flask-app --overwrite-existing

      # Step 6: Deploy to AKS
      - name: Update AKS Deployment
        run: |
          kubectl apply -f app/kubernetes/deployment.yaml
          kubectl set image deployment/flask-app-deployment flask-app=niteshcontainers.azurecr.io/flask-app:${{ github.sha }}
          kubectl apply -f app/kubernetes/my-app-service.yaml
          kubectl apply -f app/kubernetes/my-app-ingress.yaml

      # Step 7: Verify deployment status in AKS
      - name: Verify Deployment Status
        run: |
          kubectl rollout status deployment/flask-app-deployment
