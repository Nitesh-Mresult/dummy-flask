name: Deploy Flask App to AKS with Terraform

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Deploy infrastructure with Terraform
  infrastructure-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      # Log in to Azure using GitHub Secrets
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Initialize Terraform (make sure you're in the correct directory)
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure   # Ensure this points to the folder containing your .tf files

      # Terraform Plan (make sure you're in the correct directory)
      - name: Terraform Plan
        run: terraform plan -var-file=./infrastructure/terraform.tfvars -out=tfplan
        working-directory: ./infrastructure   # Ensure this points to the folder containing your .tf files

      # Apply Terraform configuration (make sure you're in the correct directory)
      - name: Terraform Apply
        run: terraform apply -var-file=./infrastructure/terraform.tfvars -auto-approve tfplan
        working-directory: ./infrastructure   # Ensure this points to the folder containing your .tf files

  # Step 2: Build and deploy Flask app to AKS
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy  # Wait for infrastructure deployment to finish

    steps:
      # Checkout the Flask application code
      - name: Checkout Flask Application Code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: niteshcontainers.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG app/login
          docker push niteshcontainers.azurecr.io/flask-app:$IMAGE_TAG

      # Set up AKS credentials
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group POC_test --name flask-app --overwrite-existing

      # Deploy Flask app to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f app/kubernetes/deployment.yaml
          kubectl set image deployment/flask-app-deployment flask-app=niteshcontainers.azurecr.io/flask-app:${{ github.sha }}
          kubectl apply -f app/kubernetes/my-app-service.yaml
          kubectl apply -f app/kubernetes/my-app-ingress.yaml

      # Verify the deployment status
      - name: Verify Deployment Status
        run: |
          kubectl rollout status deployment/flask-app-deployment
