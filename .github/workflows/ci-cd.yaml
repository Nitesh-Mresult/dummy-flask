name: Deploy Flask App to AKS with Terraform

on:
  push:
    branches:
      - main

jobs:
  # This job deploys infrastructure using Terraform
  infrastructure-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      # Log in to Azure using Azure Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Initialize Terraform with the correct backend configuration
      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.TF_RESOURCE_GROUP }}" -backend-config="storage_account_name=${{ secrets.TF_STORAGE_ACCOUNT }}" -backend-config="container_name=${{ secrets.TF_CONTAINER_NAME }}" -backend-config="key=${{ secrets.TF_KEY }}"
        working-directory: ./infrastructure

      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false -no-color -lock=false
        working-directory: ./infrastructure

      # Apply Terraform Plan
      - name: Terraform Apply
        run: terraform apply -auto-approve -lock=false tfplan
        working-directory: ./infrastructure

  # This job builds and deploys the application to AKS
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: infrastructure-deploy  # Ensure infrastructure is deployed before app deployment
    environment: production

    steps:
      - name: Checkout Flask Application Code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: niteshcontainers.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build and push Docker image to ACR
      - name: Build and Push Docker Image
        run: |
          docker build -t niteshcontainers.azurecr.io/flask-app:${{ github.sha }} app/login
          docker push niteshcontainers.azurecr.io/flask-app:${{ github.sha }}

      # Set up AKS credentials to interact with AKS cluster
      - name: Set up AKS credentials
        run: az aks get-credentials --resource-group POC_test --name flask-app

      # Verify kubectl context
      - name: Verify kubectl context
        run: kubectl config current-context

      # Deploy the application to AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f app/kubernetes/deployment.yaml
          kubectl set image deployment/flask-app-deployment flask-app=niteshcontainers.azurecr.io/flask-app:${{ github.sha }}
          kubectl apply -f app/kubernetes/my-app-service.yaml
          kubectl apply -f app/kubernetes/my-app-ingress.yaml
